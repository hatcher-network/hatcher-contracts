{
  "address": "0x2Fb436960Ae08eBD1BE09375CAC13EE5B7aEaa1b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "certificateContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "serviceId",
          "type": "uint256"
        }
      ],
      "name": "CancelSubscription",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "serviceId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "passpordId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "createdTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiredTime",
          "type": "uint256"
        }
      ],
      "name": "NewSubscription",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "serviceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiredTime",
          "type": "uint256"
        }
      ],
      "name": "RenewSubscription",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "serviceId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "checkUserSubscription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "serviceId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "checkValidSubscription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "serviceId",
          "type": "uint256"
        }
      ],
      "name": "getServiceUsersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "serviceId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "serviceId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "passportId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "createdTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiredTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct HatcherServicePassport.UserInfo",
          "name": "userInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserServices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserServicesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "serviceId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "serviceId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "renew",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd1455db8c29d33061e964a73712ee4b8883985da8f2d5dd78c92fceacc4a0fdb",
  "receipt": {
    "to": null,
    "from": "0xB05523f2Be179AB4B7190C77dF1ae76436C0694D",
    "contractAddress": "0x2Fb436960Ae08eBD1BE09375CAC13EE5B7aEaa1b",
    "transactionIndex": 10,
    "gasUsed": "2169257",
    "logsBloom": "0x0000000000000000000000002000000000000000000000000080000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000080000100000000000000010000000000c000000000020000000000000000000800000000100000000080000000000000400000000000000000100000000000000000000000000080000000000000000000200000000000000000000000000000000000000000000000000000000004004000000000000000000001000000000000000000000000000000100040000020000000000000000000000000000000001000000000000000000000000000100000",
    "blockHash": "0xa40327c1bdfc9854358ec4998baa129714df0a785a0b7beeb2a3b25f970a403b",
    "transactionHash": "0xd1455db8c29d33061e964a73712ee4b8883985da8f2d5dd78c92fceacc4a0fdb",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 34284227,
        "transactionHash": "0xd1455db8c29d33061e964a73712ee4b8883985da8f2d5dd78c92fceacc4a0fdb",
        "address": "0x2Fb436960Ae08eBD1BE09375CAC13EE5B7aEaa1b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b05523f2be179ab4b7190c77df1ae76436c0694d"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0xa40327c1bdfc9854358ec4998baa129714df0a785a0b7beeb2a3b25f970a403b"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 34284227,
        "transactionHash": "0xd1455db8c29d33061e964a73712ee4b8883985da8f2d5dd78c92fceacc4a0fdb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b05523f2be179ab4b7190c77df1ae76436c0694d",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000b8f64415e07000000000000000000000000000000000000000000000000001151866e6d5d1dad000000000000000000000000000000000000000000002fc5e01a4964ce3edc3c0000000000000000000000000000000000000000000000001145f70a2bff16ad000000000000000000000000000000000000000000002fc5e025d8c90f9ce33c",
        "logIndex": 32,
        "blockHash": "0xa40327c1bdfc9854358ec4998baa129714df0a785a0b7beeb2a3b25f970a403b"
      }
    ],
    "blockNumber": 34284227,
    "cumulativeGasUsed": "5186712",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x932FfE58f71C6d82718aBa243BbFf9067c30c09D"
  ],
  "numDeployments": 2,
  "solcInputHash": "1d562a531f2935bb6db3e51782dd5697",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"certificateContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"}],\"name\":\"CancelSubscription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"passpordId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiredTime\",\"type\":\"uint256\"}],\"name\":\"NewSubscription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiredTime\",\"type\":\"uint256\"}],\"name\":\"RenewSubscription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkUserSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkValidSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"}],\"name\":\"getServiceUsersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passportId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredTime\",\"type\":\"uint256\"}],\"internalType\":\"struct HatcherServicePassport.UserInfo\",\"name\":\"userInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserServices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserServicesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"renew\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Rocklabs\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"checkUserSubscription(uint256,address)\":{\"details\":\"check if user already subscribed in service\"},\"checkValidSubscription(uint256,address)\":{\"details\":\"check if user's subscription is still valid.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(uint256)\":{\"details\":\"user subscriptes a service\",\"params\":{\"serviceId\":\"service id\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renew(uint256,address)\":{\"details\":\"renew the service if the service has been expired\",\"params\":{\"serviceId\":\"service id\",\"user\":\"who wants to renew the service\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"hatcher service for user\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(uint256)\":{\"notice\":\"only supports native token as payment, erc20 is going to be supported asap\"}},\"notice\":\"this contact is for users who could pay for the service\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HatcherServicePassport.sol\":\"HatcherServicePassport\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/HatcherDeveloperBadge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title hatcher badge for service provider\\n * @author Rocklabs\\n * @notice who with hatcher badge could create service\\n */\\ncontract HatcherDeveloperBadge is ERC721, Ownable {\\n    using SafeMath for uint256;\\n\\n    string private _URI = \\\"\\\";\\n    //total supply\\n    uint256 private _totalSupply;\\n\\n    // EVENTS\\n    event Mint(\\n        address indexed user,\\n        uint256 indexed badgeId\\n    );\\n\\n    event SetBaseURI(string baseURI);\\n\\n    constructor() ERC721(\\\"Hatcher Developer Badge\\\", \\\"HDB\\\") {}\\n\\n    function mint() public {\\n        require(balanceOf(_msgSender()) == 0, \\\"Hatcher Developer Badge has already minted\\\");\\n        _safeMint(_msgSender(), _totalSupply);\\n        _totalSupply = _totalSupply.add(1);\\n\\n        emit Mint(_msgSender(), _totalSupply - 1);\\n    }\\n\\n    function setBaseURI(string memory baseURI) public onlyOwner {\\n        _setBaseURI(baseURI);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n    \\n    /** internal function */\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return _URI;\\n    }\\n\\n    function _setBaseURI(string memory baseURI) internal {\\n        _URI = baseURI;\\n        emit SetBaseURI(baseURI);\\n    }\\n\\n    /** prohibit transfering badge to avoid sharing just one badge to create ai service*/\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        // do nothing\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        // do nothing\\n    }\\n}\\n\",\"keccak256\":\"0xa5f903822d15fd17dfca8642c5787c96ad748fc945034a01e85ef19fa34bf279\",\"license\":\"MIT\"},\"contracts/HatcherServiceCertificate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {HatcherDeveloperBadge} from \\\"./HatcherDeveloperBadge.sol\\\";\\nimport {HatcherServicePassport} from \\\"./HatcherServicePassport.sol\\\";\\n\\n/**\\n * @title hatcher service\\n * @author Rocklabs\\n * @notice service provider create their service that will be used for users\\n */\\ncontract HatcherServiceCertificate is ERC721, Ownable {\\n    using SafeMath for uint256;\\n    uint256 public constant MINT_PRICE = 0.05 ether;\\n    uint256 public constant MAX_SERVICES_PER_USER = 10;\\n\\n    uint256 private _revenueShareRate; // for developer\\n\\n    struct Service {\\n        uint256 serviceId;\\n        address owner; // revenue to this address\\n        uint256 createdTime;\\n        uint256 userCount;\\n        uint256 maxUserLimit;\\n        uint256 fee; // user should pay this amount for using this service\\n        uint256 revenue;\\n    }\\n\\n    // private members\\n    mapping(address => Service[]) private _servicesData; // creator => services\\n    HatcherDeveloperBadge private _hatcherDeveloperBadge;\\n    HatcherServicePassport private _hatcherServicePassport;\\n    uint256 private _totalSupply;\\n\\n    // EVENTS\\n    event Mint(uint256 indexed serviceId, address indexed owner, uint256 maxUserLimit, uint256 fee);\\n    event TransferFrom(uint256 indexed serviceId, address indexed from, address indexed to);\\n    event SetServiceProps(uint256 indexed serviceId, address indexed owner, uint256 maxUserLimit, uint256 fee);\\n    event Withdraw(address indexed to, uint256 amount);\\n    event SetRevenueShare(uint256 indexed revenueShareRate);\\n\\n    constructor(\\n        address hatcherDeveloperBadge,\\n        uint256 revenueShareRate\\n    ) ERC721(\\\"Hatcher Service Certificate\\\", \\\"HSC\\\") {\\n        _hatcherDeveloperBadge = HatcherDeveloperBadge(hatcherDeveloperBadge);\\n        _revenueShareRate = revenueShareRate;\\n    }\\n\\n    /**\\n     * @notice call this first to set service password contract address\\n     * @param hatcherServicePassport contract address\\n     */\\n    function init(address hatcherServicePassport) external onlyOwner {\\n        _hatcherServicePassport = HatcherServicePassport(\\n            hatcherServicePassport\\n        );\\n    }\\n\\n    /**\\n     * @notice only badge nft owner could call this method\\n     * @dev service provider create a new service\\n     * @param maxUserLimit  maximum number of users using this service set by the service provider\\n     * @param fee the amount of payment for the service set by the service provider\\n     * @return service  the new service info\\n     */\\n    function mint(\\n        uint256 maxUserLimit,\\n        uint256 fee\\n    ) public payable returns (Service memory service) {\\n        require(\\n            _hatcherDeveloperBadge.balanceOf(msg.sender) > 0,\\n            \\\"You need an Hatcher Developer Badge to mint this NFT\\\"\\n        );\\n        require(msg.value >= MINT_PRICE, \\\"Insufficient payment\\\");\\n\\n        uint256 servicesPerUser = balanceOf(_msgSender());\\n        require(\\n            servicesPerUser < MAX_SERVICES_PER_USER,\\n            \\\"Exceeded maximum number of tokens per user\\\"\\n        );\\n\\n        uint256 serviceId = _totalSupply;\\n        _totalSupply = _totalSupply.add(1);\\n        _safeMint(msg.sender, serviceId);\\n        service = _addService(msg.sender, serviceId, maxUserLimit, fee);\\n\\n        emit Mint(serviceId, _msgSender(), maxUserLimit, fee);\\n    }\\n\\n    /** public functions */\\n    function getServiceUserCount(\\n        uint256 serviceId\\n    ) public view returns (uint256) {\\n        return _hatcherServicePassport.getServiceUsersCount(serviceId);\\n    }\\n\\n    function getOwnerServices(\\n        address owner\\n    ) public view returns (Service[] memory) {\\n        Service[] memory s = _servicesData[owner];\\n        for (uint i = 0; i < s.length; i++) {\\n            s[i].userCount = getServiceUserCount(s[i].serviceId);\\n        }\\n        return s;\\n    }\\n\\n    // function getSubscribedServices(address user) public view returns(Service[] memory) {\\n\\n    // }\\n\\n    function getServiceInfo(\\n        uint256 serviceId\\n    ) public view returns (Service memory ret) {\\n        require(_exists(serviceId), \\\"Token does not exist\\\");\\n        Service[] memory s = _servicesData[ownerOf(serviceId)];\\n        for (uint i = 0; i < s.length; i++) {\\n            if (s[i].serviceId == serviceId) ret = s[i];\\n        }\\n        ret.userCount = getServiceUserCount(serviceId);\\n    }\\n\\n    function getServiceCount(address owner) public view returns (uint256) {\\n        return _servicesData[owner].length;\\n    }\\n\\n    function getServiceRevenue(\\n        uint256 serviceId\\n    ) public view returns (uint256) {\\n        return getServiceInfo(serviceId).revenue;\\n    }\\n\\n    /** ************* badge owner call **********/\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 serviceId\\n    ) public override {\\n        Service[] storage s = _servicesData[ownerOf(serviceId)];\\n        Service memory temp;\\n        for (uint i = 0; i < s.length; i++) {\\n            if (s[i].serviceId == serviceId) {\\n                temp = s[i];\\n                delete s[i];\\n            }\\n        }\\n        _servicesData[from] = s;\\n\\n        // transfer revenue\\n        uint256 revenue = getServiceRevenue(serviceId);\\n        uint256 revenueShare = (revenue * _revenueShareRate) / 100;\\n        payable(owner()).transfer(revenueShare);\\n        payable(ownerOf(serviceId)).transfer(revenue - revenueShare);\\n\\n        // update to service\\n        super.transferFrom(from, to, serviceId);\\n        Service memory ns = Service({\\n            serviceId: serviceId,\\n            owner: to,\\n            createdTime: temp.createdTime,\\n            maxUserLimit: temp.maxUserLimit,\\n            userCount: 0,\\n            fee: temp.fee,\\n            revenue: 0\\n        });\\n        _servicesData[to].push(ns);\\n\\n        emit TransferFrom(serviceId, from, to);\\n    }\\n\\n    function setServiceProps(\\n        uint256 serviceId,\\n        uint256 maxUserLimit,\\n        uint256 fee\\n    ) public {\\n        require(_exists(serviceId), \\\"serviceId does not exist\\\");\\n        Service[] storage s = _servicesData[ownerOf(serviceId)];\\n        for (uint i = 0; i < s.length; i++) {\\n            if (s[i].serviceId == serviceId && s[i].owner == msg.sender) {\\n                s[i].maxUserLimit = maxUserLimit;\\n                s[i].fee = fee;\\n                _servicesData[msg.sender] = s;\\n            }\\n        }\\n        emit SetServiceProps(serviceId, msg.sender, maxUserLimit, fee);\\n    }\\n\\n    /** *** only passport contract call it ***/\\n    function addServiceRevenue(\\n        uint256 serviceId,\\n        uint256 amount\\n    ) external payable {\\n        require(\\n            address(_hatcherServicePassport) == msg.sender,\\n            \\\"only service passport can call it.\\\"\\n        );\\n        Service[] storage s = _servicesData[ownerOf(serviceId)];\\n        for (uint i = 0; i < s.length; i++) {\\n            if (s[i].serviceId == serviceId)\\n                s[i].revenue = s[i].revenue.add(amount);\\n        }\\n        _servicesData[ownerOf(serviceId)] = s;\\n    }\\n\\n    /************* owner call *************** */\\n    function setRevenueShare(uint256 revenueShareRate) public onlyOwner {\\n        require(revenueShareRate <= 100, \\\"Invalid revenue share rate\\\");\\n        _revenueShareRate = revenueShareRate;\\n\\n        emit SetRevenueShare(revenueShareRate);\\n    }\\n\\n    // withdraw native token function.\\n    function withdraw(address payable _to, uint256 _amount) external onlyOwner {\\n        require(_to != address(0x0), \\\" _to cannot be zero address\\\");\\n        require(_amount < (MINT_PRICE * _totalSupply), \\\" _amount cannot be larger than total mint amount\\\");\\n\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"withdraw failed\\\");\\n\\n        emit Withdraw(_to, _amount);\\n    }\\n\\n    /** internal functions */\\n    function _addService(\\n        address _creator,\\n        uint256 _serviceId,\\n        uint256 _maxUserLimit,\\n        uint256 _fee\\n    ) internal returns (Service memory) {\\n        Service[] storage s = _servicesData[_creator];\\n        Service memory s1 = Service({\\n            serviceId: _serviceId,\\n            owner: _creator,\\n            createdTime: block.timestamp,\\n            userCount: 0,\\n            maxUserLimit: _maxUserLimit,\\n            fee: _fee,\\n            revenue: 0\\n        });\\n        s.push(s1);\\n        _servicesData[_creator] = s;\\n        return s1;\\n    }\\n\\n    function exists(uint256 serviceId) public view returns (bool) {\\n        return _exists(serviceId);\\n    }\\n}\\n\",\"keccak256\":\"0x1f823912c17e6e94ad45c25491c44fd32335dab0ab2537971ae9130c3973bb6c\",\"license\":\"MIT\"},\"contracts/HatcherServicePassport.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {HatcherServiceCertificate} from \\\"./HatcherServiceCertificate.sol\\\";\\n\\n/**\\n * @title hatcher service for user\\n * @author Rocklabs\\n * @notice this contact is for users who could pay for the service\\n */\\ncontract HatcherServicePassport is ERC721, Ownable {\\n    using SafeMath for uint256;\\n    // using SafeERC20 for IERC20; // support erc20 token as payment in future\\n\\n    struct UserInfo {\\n        uint256 serviceId; // service id which is certificated in `HatcherServiceCertificate` contract\\n        uint256 passportId; // user passport minted from this contact that is able to use the service\\n        uint256 createdTime;\\n        uint256 expiredTime;\\n    }\\n\\n    // private members\\n    HatcherServiceCertificate private _certificateContract; // service info\\n    mapping(uint256 => UserInfo[]) private _serviceUsers; // service => users[]\\n    mapping(address => uint256[]) private _userServices; // user => services\\n\\n    uint256 private _totalSupply; //\\n\\n    // EVENTS\\n    event NewSubscription(\\n        address indexed user,\\n        uint256 indexed serviceId,\\n        uint256 indexed passpordId,\\n        uint256 createdTime,\\n        uint256 expiredTime\\n    );\\n    event RenewSubscription(address indexed user, uint256 indexed serviceId, uint256 expiredTime);\\n    event CancelSubscription(address indexed user, uint256 indexed serviceId);\\n\\n    constructor(\\n        address certificateContract\\n    ) ERC721(\\\"Hatcher Service Passport\\\", \\\"HSP\\\") {\\n        _certificateContract = HatcherServiceCertificate(certificateContract);\\n    }\\n\\n    /**\\n     * @notice only supports native token as payment, erc20 is going to be supported asap\\n     * @dev user subscriptes a service\\n     * @param serviceId service id\\n     */\\n    function mint(uint256 serviceId) public payable {\\n        require(\\n            _certificateContract.exists(serviceId),\\n            \\\"ServiceId does not exist\\\"\\n        );\\n        HatcherServiceCertificate.Service memory s = _certificateContract\\n            .getServiceInfo(serviceId);\\n\\n        require(\\n            !checkUserSubscription(serviceId, msg.sender),\\n            \\\"User already has an active subscription\\\"\\n        );\\n\\n        require(\\n            _serviceUsers[serviceId].length < s.maxUserLimit,\\n            \\\"exceeded max user subscription limit\\\"\\n        );\\n        require(msg.value >= s.fee, \\\"Insufficient payment\\\"); // pay for the service\\n\\n        _safeMint(msg.sender, _totalSupply);\\n\\n        uint256 createdTime = block.timestamp;\\n        uint256 expiredTime = block.timestamp + 30 * 3600 * 24;\\n\\n        _updateRevenue(serviceId, s.fee); // update revenue for service\\n\\n        _serviceUsers[serviceId].push(\\n            UserInfo({\\n                serviceId: serviceId,\\n                passportId: _totalSupply,\\n                createdTime: createdTime,\\n                expiredTime: expiredTime\\n            })\\n        );\\n        _userServices[msg.sender].push(serviceId);\\n        _totalSupply++;\\n\\n        emit NewSubscription(msg.sender, serviceId, _totalSupply - 1, createdTime, expiredTime);\\n    }\\n\\n    /**\\n     * @dev renew the service if the service has been expired\\n     * @param serviceId service id\\n     * @param user who wants to renew the service\\n     */\\n    function renew(uint256 serviceId, address user) public payable {\\n        require(\\n            _certificateContract.exists(serviceId),\\n            \\\"ServiceId does not exist\\\"\\n        );\\n        HatcherServiceCertificate.Service memory s = _certificateContract\\n            .getServiceInfo(serviceId);\\n        require(\\n            checkUserSubscription(serviceId, msg.sender),\\n            \\\"User does not has an active subscription, mint frist!\\\"\\n        );\\n        require(\\n            !checkValidSubscription(serviceId, msg.sender),\\n            \\\"User has an active subscription, no need to renew\\\"\\n        );\\n\\n        require(msg.value >= s.fee, \\\"Insufficient payment\\\");\\n        _updateRevenue(serviceId, s.fee);\\n\\n        UserInfo[] storage users = _serviceUsers[serviceId];\\n\\n        uint256 expiredTime = block.timestamp + 30 * 3600 * 24;\\n        for (uint i = 0; i < users.length; i++) {\\n            if (ownerOf(users[i].passportId) == user) {\\n                users[i].expiredTime = expiredTime;\\n                _serviceUsers[serviceId] = users;\\n            }\\n        }\\n\\n        emit RenewSubscription(msg.sender, serviceId, expiredTime);\\n    }\\n\\n    /**\\n     * @dev cancel subscription\\n     * @param serviceId service id\\n     */\\n    // function cancel(uint256 serviceId, address user) external {\\n    //     require(_certificateContract.exists(serviceId), \\\"Token id does not exist\\\");\\n\\n    //     require(checkUserSubscription(serviceId, msg.sender), \\\"User does not has an active subscription\\\");\\n    //     require(checkValidSubscription(serviceId, msg.sender), \\\"User has an inactive subscription, fail to cancel subscription\\\");\\n\\n    //     UserInfo[] storage users = _serviceUsers[serviceId];\\n    //     for(uint i = 0; i < users.length; i++)\\n    //     {\\n    //         UserInfo storage u = users[i];\\n    //         if(ownerOf(u.passpordId) == user) {\\n    //             delete users[i]\\n    //             _serviceUsers[serviceId] = users;\\n    //             break;\\n    //         }\\n    //     }\\n\\n    //     // delete service from user's subscriptions\\n    //     uint256[] storage services = _userServices[msg.sender];\\n    //     for(uint i = 0; i < services.length; i++)\\n    //     {\\n    //         if(services[i] == serviceId) {\\n    //             delete services[i];\\n    //             _userServices[msg.sender] = services;\\n    //             break;\\n    //         }\\n    //     }\\n\\n    //     emit CancelSubscription(msg.sender, serviceId);\\n    // }\\n\\n    function _updateRevenue(uint256 serviceId, uint256 amount) internal {\\n        require(msg.value >= amount, \\\"Insufficient payment\\\");\\n        (bool success, ) = address(_certificateContract).call{value: msg.value}(\\n            abi.encodeWithSignature(\\n                \\\"addServiceRevenue(uint256,uint256)\\\",\\n                serviceId,\\n                amount\\n            )\\n        );\\n        require(success, \\\"update revenue failed\\\");\\n    }\\n\\n    /** ********** public call **************** */\\n    /**\\n     * @dev check if user already subscribed in service\\n     */\\n    function checkUserSubscription(\\n        uint256 serviceId,\\n        address user\\n    ) public view returns (bool) {\\n        uint256[] memory s = _userServices[user];\\n        for (uint i = 0; i < s.length; i++) {\\n            if (s[i] == serviceId) return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev check if user's subscription is still valid.\\n     */\\n    function checkValidSubscription(\\n        uint256 serviceId,\\n        address user\\n    ) public view returns (bool) {\\n        uint256 now_ = block.timestamp;\\n\\n        UserInfo[] memory users = _serviceUsers[serviceId];\\n\\n        for (uint i = 0; i < users.length; i++) {\\n            if (ownerOf(users[i].passportId) == user) {\\n                return\\n                    (users[i].createdTime <= now_) &&\\n                    (now_ <= users[i].expiredTime);\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getUserInfo(\\n        uint256 serviceId,\\n        address user\\n    ) public view returns (UserInfo memory userInfo) {\\n        UserInfo[] memory users = _serviceUsers[serviceId];\\n        for (uint i = 0; i < users.length; i++) {\\n            if (ownerOf(users[i].passportId) == user) userInfo = users[i];\\n        }\\n    }\\n\\n    function getServiceUsersCount(\\n        uint256 serviceId\\n    ) public view returns (uint256) {\\n        return _serviceUsers[serviceId].length;\\n    }\\n\\n    function getUserServices(\\n        address user\\n    ) public view returns (uint256[] memory) {\\n        return _userServices[user];\\n    }\\n\\n    function getUserServicesCount(address user) public view returns (uint256) {\\n        return _userServices[user].length;\\n    }\\n}\\n\",\"keccak256\":\"0xf1663b7ad93d76536ff257c88fa60fc7c8a1a505c09dbe2e15314d8a04307d80\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620026de380380620026de8339810160408190526200003491620001e9565b604080518082018252601881527f4861746368657220536572766963652050617373706f7274000000000000000060208083019182528351808501909452600384526204853560ec1b908401528151919291620000949160009162000143565b508051620000aa90600190602084019062000143565b505050620000c7620000c1620000ed60201b60201c565b620000f1565b600780546001600160a01b0319166001600160a01b039290921691909117905562000258565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b82805462000151906200021b565b90600052602060002090601f016020900481019282620001755760008555620001c0565b82601f106200019057805160ff1916838001178555620001c0565b82800160010185558215620001c0579182015b82811115620001c0578251825591602001919060010190620001a3565b50620001ce929150620001d2565b5090565b5b80821115620001ce5760008155600101620001d3565b600060208284031215620001fc57600080fd5b81516001600160a01b03811681146200021457600080fd5b9392505050565b600181811c908216806200023057607f821691505b602082108114156200025257634e487b7160e01b600052602260045260246000fd5b50919050565b61247680620002686000396000f3fe60806040526004361061014b5760003560e01c80636352211e116100b6578063a0712d681161006f578063a0712d681461040d578063a22cb46514610420578063b88d4fde14610440578063c87b56dd14610460578063e985e9c514610480578063f2fde38b146104c957600080fd5b80636352211e1461035857806370a0823114610378578063715018a6146103985780638da5cb5b146103ad57806391f79bd3146103cb57806395d89b41146103f857600080fd5b806323b872dd1161010857806323b872dd146102745780633b4dd7b21461029457806342842e0e146102d857806357635148146102f85780635dc8b5db146103255780635fa640471461034557600080fd5b806301ffc9a71461015057806306fdde0314610185578063081812fc146101a7578063095ea7b3146101df5780631069f3b51461020157806313e9b6a914610254575b600080fd5b34801561015c57600080fd5b5061017061016b366004611e05565b6104e9565b60405190151581526020015b60405180910390f35b34801561019157600080fd5b5061019a61053b565b60405161017c9190611e7a565b3480156101b357600080fd5b506101c76101c2366004611e8d565b6105cd565b6040516001600160a01b03909116815260200161017c565b3480156101eb57600080fd5b506101ff6101fa366004611ebb565b6105f4565b005b34801561020d57600080fd5b5061022161021c366004611ee7565b61070f565b60405161017c91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b34801561026057600080fd5b5061017061026f366004611ee7565b610848565b34801561028057600080fd5b506101ff61028f366004611f17565b610982565b3480156102a057600080fd5b506102ca6102af366004611f58565b6001600160a01b031660009081526009602052604090205490565b60405190815260200161017c565b3480156102e457600080fd5b506101ff6102f3366004611f17565b6109b3565b34801561030457600080fd5b50610318610313366004611f58565b6109ce565b60405161017c9190611f75565b34801561033157600080fd5b50610170610340366004611ee7565b610a3a565b6101ff610353366004611ee7565b610af3565b34801561036457600080fd5b506101c7610373366004611e8d565b610e3a565b34801561038457600080fd5b506102ca610393366004611f58565b610e9a565b3480156103a457600080fd5b506101ff610f20565b3480156103b957600080fd5b506006546001600160a01b03166101c7565b3480156103d757600080fd5b506102ca6103e6366004611e8d565b60009081526008602052604090205490565b34801561040457600080fd5b5061019a610f34565b6101ff61041b366004611e8d565b610f43565b34801561042c57600080fd5b506101ff61043b366004611fc7565b61126f565b34801561044c57600080fd5b506101ff61045b36600461203c565b61127e565b34801561046c57600080fd5b5061019a61047b366004611e8d565b6112b6565b34801561048c57600080fd5b5061017061049b366004612100565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156104d557600080fd5b506101ff6104e4366004611f58565b61132a565b60006001600160e01b031982166380ac58cd60e01b148061051a57506001600160e01b03198216635b5e139f60e01b145b8061053557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461054a9061212e565b80601f01602080910402602001604051908101604052809291908181526020018280546105769061212e565b80156105c35780601f10610598576101008083540402835291602001916105c3565b820191906000526020600020905b8154815290600101906020018083116105a657829003601f168201915b5050505050905090565b60006105d8826113a3565b506000908152600460205260409020546001600160a01b031690565b60006105ff82610e3a565b9050806001600160a01b0316836001600160a01b031614156106725760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061068e575061068e813361049b565b6107005760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610669565b61070a8383611402565b505050565b61073a6040518060800160405280600081526020016000815260200160008152602001600081525090565b600083815260086020908152604080832080548251818502810185019093528083529192909190849084015b828210156107c0578382906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505081526020019060010190610766565b50505050905060005b815181101561084057836001600160a01b03166108028383815181106107f1576107f1612169565b602002602001015160200151610e3a565b6001600160a01b0316141561082e5781818151811061082357610823612169565b602002602001015192505b8061083881612195565b9150506107c9565b505092915050565b6000828152600860209081526040808320805482518185028101850190935280835242938593929190849084015b828210156108d0578382906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505081526020019060010190610876565b50505050905060005b815181101561097657846001600160a01b03166109018383815181106107f1576107f1612169565b6001600160a01b03161415610964578282828151811061092357610923612169565b6020026020010151604001511115801561095a575081818151811061094a5761094a612169565b6020026020010151606001518311155b9350505050610535565b8061096e81612195565b9150506108d9565b50600095945050505050565b61098c3382611470565b6109a85760405162461bcd60e51b8152600401610669906121b0565b61070a8383836114ef565b61070a8383836040518060200160405280600081525061127e565b6001600160a01b038116600090815260096020908152604091829020805483518184028101840190945280845260609392830182828015610a2e57602002820191906000526020600020905b815481526020019060010190808311610a1a575b50505050509050919050565b6001600160a01b038116600090815260096020908152604080832080548251818502810185019093528083528493830182828015610a9757602002820191906000526020600020905b815481526020019060010190808311610a83575b5050505050905060005b8151811015610ae85784828281518110610abd57610abd612169565b60200260200101511415610ad657600192505050610535565b80610ae081612195565b915050610aa1565b506000949350505050565b600754604051634f558e7960e01b8152600481018490526001600160a01b0390911690634f558e7990602401602060405180830381865afa158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6091906121fd565b610ba75760405162461bcd60e51b815260206004820152601860248201527714d95c9d9a58d9525908191bd95cc81b9bdd08195e1a5cdd60421b6044820152606401610669565b6007546040516310551d4b60e31b8152600481018490526000916001600160a01b0316906382a8ea589060240160e060405180830381865afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c15919061221a565b9050610c218333610a3a565b610c8b5760405162461bcd60e51b815260206004820152603560248201527f5573657220646f6573206e6f742068617320616e2061637469766520737562736044820152746372697074696f6e2c206d696e742066726973742160581b6064820152608401610669565b610c958333610848565b15610cfc5760405162461bcd60e51b815260206004820152603160248201527f557365722068617320616e2061637469766520737562736372697074696f6e2c604482015270206e6f206e65656420746f2072656e657760781b6064820152608401610669565b8060a00151341015610d205760405162461bcd60e51b8152600401610669906122a7565b610d2e838260a00151611653565b600083815260086020526040812090610d4a4262278d006122d5565b905060005b8254811015610dfb57846001600160a01b0316610d8e848381548110610d7757610d77612169565b906000526020600020906004020160010154610e3a565b6001600160a01b03161415610de95781838281548110610db057610db0612169565b9060005260206000209060040201600301819055508260086000888152602001908152602001600020908054610de7929190611d52565b505b80610df381612195565b915050610d4f565b50604051818152859033907fad47746700e8a53a6dd7ee4934a8a2db6f48b9198eaaceff60590944f4dcfc2b9060200160405180910390a35050505050565b6000818152600260205260408120546001600160a01b0316806105355760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610669565b60006001600160a01b038216610f045760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610669565b506001600160a01b031660009081526003602052604090205490565b610f28611759565b610f3260006117b3565b565b60606001805461054a9061212e565b600754604051634f558e7960e01b8152600481018390526001600160a01b0390911690634f558e7990602401602060405180830381865afa158015610f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb091906121fd565b610ff75760405162461bcd60e51b815260206004820152601860248201527714d95c9d9a58d9525908191bd95cc81b9bdd08195e1a5cdd60421b6044820152606401610669565b6007546040516310551d4b60e31b8152600481018390526000916001600160a01b0316906382a8ea589060240160e060405180830381865afa158015611041573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611065919061221a565b90506110718233610a3a565b156110ce5760405162461bcd60e51b815260206004820152602760248201527f5573657220616c72656164792068617320616e206163746976652073756273636044820152663934b83a34b7b760c91b6064820152608401610669565b60808101516000838152600860205260409020541061113b5760405162461bcd60e51b8152602060048201526024808201527f6578636565646564206d6178207573657220737562736372697074696f6e206c6044820152631a5b5a5d60e21b6064820152608401610669565b8060a0015134101561115f5760405162461bcd60e51b8152600401610669906122a7565b61116b33600a54611805565b42600061117b8262278d006122d5565b905061118b848460a00151611653565b60008481526008602090815260408083208151608081018352888152600a805482860190815282850189815260608401898152855460018181018855968a52888a2095516004909102909501948555915184860155516002840155516003909201919091553385526009845291842080549182018155845291832090910186905580549161121883612195565b91905055506001600a5461122c91906122ed565b6040805184815260208101849052869133917f0b07e743ff4d8ff00f2ba2ad9ccacd63d0abc6730623fa67062c4f3b3a95494b910160405180910390a450505050565b61127a33838361181f565b5050565b6112883383611470565b6112a45760405162461bcd60e51b8152600401610669906121b0565b6112b0848484846118ee565b50505050565b60606112c1826113a3565b60006112d860408051602081019091526000815290565b905060008151116112f85760405180602001604052806000815250611323565b8061130284611921565b604051602001611313929190612304565b6040516020818303038152906040525b9392505050565b611332611759565b6001600160a01b0381166113975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610669565b6113a0816117b3565b50565b6000818152600260205260409020546001600160a01b03166113a05760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610669565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061143782610e3a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061147c83610e3a565b9050806001600160a01b0316846001600160a01b031614806114c357506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806114e75750836001600160a01b03166114dc846105cd565b6001600160a01b0316145b949350505050565b826001600160a01b031661150282610e3a565b6001600160a01b0316146115285760405162461bcd60e51b815260040161066990612333565b6001600160a01b03821661158a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610669565b826001600160a01b031661159d82610e3a565b6001600160a01b0316146115c35760405162461bcd60e51b815260040161066990612333565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b803410156116735760405162461bcd60e51b8152600401610669906122a7565b60075460405160248101849052604481018390526000916001600160a01b031690349060640160408051601f198184030181529181526020820180516001600160e01b031663446f62e760e11b179052516116ce9190612378565b60006040518083038185875af1925050503d806000811461170b576040519150601f19603f3d011682016040523d82523d6000602084013e611710565b606091505b505090508061070a5760405162461bcd60e51b81526020600482015260156024820152741d5c19185d19481c995d995b9d594819985a5b1959605a1b6044820152606401610669565b6006546001600160a01b03163314610f325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610669565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61127a8282604051806020016040528060008152506119be565b816001600160a01b0316836001600160a01b031614156118815760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610669565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6118f98484846114ef565b611905848484846119f1565b6112b05760405162461bcd60e51b815260040161066990612394565b6060600061192e83611aef565b600101905060008167ffffffffffffffff81111561194e5761194e611ff5565b6040519080825280601f01601f191660200182016040528015611978576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846119b1576119b6565b611982565b509392505050565b6119c88383611bc7565b6119d560008484846119f1565b61070a5760405162461bcd60e51b815260040161066990612394565b60006001600160a01b0384163b15611ae457604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611a359033908990889088906004016123e6565b6020604051808303816000875af1925050508015611a70575060408051601f3d908101601f19168201909252611a6d91810190612423565b60015b611aca573d808015611a9e576040519150601f19603f3d011682016040523d82523d6000602084013e611aa3565b606091505b508051611ac25760405162461bcd60e51b815260040161066990612394565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506114e7565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611b2e5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611b5a576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611b7857662386f26fc10000830492506010015b6305f5e1008310611b90576305f5e100830492506008015b6127108310611ba457612710830492506004015b60648310611bb6576064830492506002015b600a83106105355760010192915050565b6001600160a01b038216611c1d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610669565b6000818152600260205260409020546001600160a01b031615611c825760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610669565b6000818152600260205260409020546001600160a01b031615611ce75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610669565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054828255906000526020600020906004028101928215611db65760005260206000209160040282015b82811115611db6578254825560018084015490830155600280840154908301556003808401549083015560049283019290910190611d7d565b50611dc2929150611dc6565b5090565b5b80821115611dc257600080825560018201819055600282018190556003820155600401611dc7565b6001600160e01b0319811681146113a057600080fd5b600060208284031215611e1757600080fd5b813561132381611def565b60005b83811015611e3d578181015183820152602001611e25565b838111156112b05750506000910152565b60008151808452611e66816020860160208601611e22565b601f01601f19169290920160200192915050565b6020815260006113236020830184611e4e565b600060208284031215611e9f57600080fd5b5035919050565b6001600160a01b03811681146113a057600080fd5b60008060408385031215611ece57600080fd5b8235611ed981611ea6565b946020939093013593505050565b60008060408385031215611efa57600080fd5b823591506020830135611f0c81611ea6565b809150509250929050565b600080600060608486031215611f2c57600080fd5b8335611f3781611ea6565b92506020840135611f4781611ea6565b929592945050506040919091013590565b600060208284031215611f6a57600080fd5b813561132381611ea6565b6020808252825182820181905260009190848201906040850190845b81811015611fad57835183529284019291840191600101611f91565b50909695505050505050565b80151581146113a057600080fd5b60008060408385031215611fda57600080fd5b8235611fe581611ea6565b91506020830135611f0c81611fb9565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561203457612034611ff5565b604052919050565b6000806000806080858703121561205257600080fd5b843561205d81611ea6565b935060208581013561206e81611ea6565b935060408601359250606086013567ffffffffffffffff8082111561209257600080fd5b818801915088601f8301126120a657600080fd5b8135818111156120b8576120b8611ff5565b6120ca601f8201601f1916850161200b565b915080825289848285010111156120e057600080fd5b808484018584013760008482840101525080935050505092959194509250565b6000806040838503121561211357600080fd5b823561211e81611ea6565b91506020830135611f0c81611ea6565b600181811c9082168061214257607f821691505b6020821081141561216357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156121a9576121a961217f565b5060010190565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60006020828403121561220f57600080fd5b815161132381611fb9565b600060e0828403121561222c57600080fd5b60405160e0810181811067ffffffffffffffff8211171561224f5761224f611ff5565b60405282518152602083015161226481611ea6565b8060208301525060408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b602080825260149082015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b604082015260600190565b600082198211156122e8576122e861217f565b500190565b6000828210156122ff576122ff61217f565b500390565b60008351612316818460208801611e22565b83519083019061232a818360208801611e22565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6000825161238a818460208701611e22565b9190910192915050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061241990830184611e4e565b9695505050505050565b60006020828403121561243557600080fd5b815161132381611def56fea2646970667358221220499d72d7341abbd3b018829938f6fc1a8ca69ff60eabd18ad3e346f774195bca64736f6c634300080c0033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c80636352211e116100b6578063a0712d681161006f578063a0712d681461040d578063a22cb46514610420578063b88d4fde14610440578063c87b56dd14610460578063e985e9c514610480578063f2fde38b146104c957600080fd5b80636352211e1461035857806370a0823114610378578063715018a6146103985780638da5cb5b146103ad57806391f79bd3146103cb57806395d89b41146103f857600080fd5b806323b872dd1161010857806323b872dd146102745780633b4dd7b21461029457806342842e0e146102d857806357635148146102f85780635dc8b5db146103255780635fa640471461034557600080fd5b806301ffc9a71461015057806306fdde0314610185578063081812fc146101a7578063095ea7b3146101df5780631069f3b51461020157806313e9b6a914610254575b600080fd5b34801561015c57600080fd5b5061017061016b366004611e05565b6104e9565b60405190151581526020015b60405180910390f35b34801561019157600080fd5b5061019a61053b565b60405161017c9190611e7a565b3480156101b357600080fd5b506101c76101c2366004611e8d565b6105cd565b6040516001600160a01b03909116815260200161017c565b3480156101eb57600080fd5b506101ff6101fa366004611ebb565b6105f4565b005b34801561020d57600080fd5b5061022161021c366004611ee7565b61070f565b60405161017c91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b34801561026057600080fd5b5061017061026f366004611ee7565b610848565b34801561028057600080fd5b506101ff61028f366004611f17565b610982565b3480156102a057600080fd5b506102ca6102af366004611f58565b6001600160a01b031660009081526009602052604090205490565b60405190815260200161017c565b3480156102e457600080fd5b506101ff6102f3366004611f17565b6109b3565b34801561030457600080fd5b50610318610313366004611f58565b6109ce565b60405161017c9190611f75565b34801561033157600080fd5b50610170610340366004611ee7565b610a3a565b6101ff610353366004611ee7565b610af3565b34801561036457600080fd5b506101c7610373366004611e8d565b610e3a565b34801561038457600080fd5b506102ca610393366004611f58565b610e9a565b3480156103a457600080fd5b506101ff610f20565b3480156103b957600080fd5b506006546001600160a01b03166101c7565b3480156103d757600080fd5b506102ca6103e6366004611e8d565b60009081526008602052604090205490565b34801561040457600080fd5b5061019a610f34565b6101ff61041b366004611e8d565b610f43565b34801561042c57600080fd5b506101ff61043b366004611fc7565b61126f565b34801561044c57600080fd5b506101ff61045b36600461203c565b61127e565b34801561046c57600080fd5b5061019a61047b366004611e8d565b6112b6565b34801561048c57600080fd5b5061017061049b366004612100565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156104d557600080fd5b506101ff6104e4366004611f58565b61132a565b60006001600160e01b031982166380ac58cd60e01b148061051a57506001600160e01b03198216635b5e139f60e01b145b8061053557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461054a9061212e565b80601f01602080910402602001604051908101604052809291908181526020018280546105769061212e565b80156105c35780601f10610598576101008083540402835291602001916105c3565b820191906000526020600020905b8154815290600101906020018083116105a657829003601f168201915b5050505050905090565b60006105d8826113a3565b506000908152600460205260409020546001600160a01b031690565b60006105ff82610e3a565b9050806001600160a01b0316836001600160a01b031614156106725760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061068e575061068e813361049b565b6107005760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610669565b61070a8383611402565b505050565b61073a6040518060800160405280600081526020016000815260200160008152602001600081525090565b600083815260086020908152604080832080548251818502810185019093528083529192909190849084015b828210156107c0578382906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505081526020019060010190610766565b50505050905060005b815181101561084057836001600160a01b03166108028383815181106107f1576107f1612169565b602002602001015160200151610e3a565b6001600160a01b0316141561082e5781818151811061082357610823612169565b602002602001015192505b8061083881612195565b9150506107c9565b505092915050565b6000828152600860209081526040808320805482518185028101850190935280835242938593929190849084015b828210156108d0578382906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505081526020019060010190610876565b50505050905060005b815181101561097657846001600160a01b03166109018383815181106107f1576107f1612169565b6001600160a01b03161415610964578282828151811061092357610923612169565b6020026020010151604001511115801561095a575081818151811061094a5761094a612169565b6020026020010151606001518311155b9350505050610535565b8061096e81612195565b9150506108d9565b50600095945050505050565b61098c3382611470565b6109a85760405162461bcd60e51b8152600401610669906121b0565b61070a8383836114ef565b61070a8383836040518060200160405280600081525061127e565b6001600160a01b038116600090815260096020908152604091829020805483518184028101840190945280845260609392830182828015610a2e57602002820191906000526020600020905b815481526020019060010190808311610a1a575b50505050509050919050565b6001600160a01b038116600090815260096020908152604080832080548251818502810185019093528083528493830182828015610a9757602002820191906000526020600020905b815481526020019060010190808311610a83575b5050505050905060005b8151811015610ae85784828281518110610abd57610abd612169565b60200260200101511415610ad657600192505050610535565b80610ae081612195565b915050610aa1565b506000949350505050565b600754604051634f558e7960e01b8152600481018490526001600160a01b0390911690634f558e7990602401602060405180830381865afa158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6091906121fd565b610ba75760405162461bcd60e51b815260206004820152601860248201527714d95c9d9a58d9525908191bd95cc81b9bdd08195e1a5cdd60421b6044820152606401610669565b6007546040516310551d4b60e31b8152600481018490526000916001600160a01b0316906382a8ea589060240160e060405180830381865afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c15919061221a565b9050610c218333610a3a565b610c8b5760405162461bcd60e51b815260206004820152603560248201527f5573657220646f6573206e6f742068617320616e2061637469766520737562736044820152746372697074696f6e2c206d696e742066726973742160581b6064820152608401610669565b610c958333610848565b15610cfc5760405162461bcd60e51b815260206004820152603160248201527f557365722068617320616e2061637469766520737562736372697074696f6e2c604482015270206e6f206e65656420746f2072656e657760781b6064820152608401610669565b8060a00151341015610d205760405162461bcd60e51b8152600401610669906122a7565b610d2e838260a00151611653565b600083815260086020526040812090610d4a4262278d006122d5565b905060005b8254811015610dfb57846001600160a01b0316610d8e848381548110610d7757610d77612169565b906000526020600020906004020160010154610e3a565b6001600160a01b03161415610de95781838281548110610db057610db0612169565b9060005260206000209060040201600301819055508260086000888152602001908152602001600020908054610de7929190611d52565b505b80610df381612195565b915050610d4f565b50604051818152859033907fad47746700e8a53a6dd7ee4934a8a2db6f48b9198eaaceff60590944f4dcfc2b9060200160405180910390a35050505050565b6000818152600260205260408120546001600160a01b0316806105355760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610669565b60006001600160a01b038216610f045760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610669565b506001600160a01b031660009081526003602052604090205490565b610f28611759565b610f3260006117b3565b565b60606001805461054a9061212e565b600754604051634f558e7960e01b8152600481018390526001600160a01b0390911690634f558e7990602401602060405180830381865afa158015610f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb091906121fd565b610ff75760405162461bcd60e51b815260206004820152601860248201527714d95c9d9a58d9525908191bd95cc81b9bdd08195e1a5cdd60421b6044820152606401610669565b6007546040516310551d4b60e31b8152600481018390526000916001600160a01b0316906382a8ea589060240160e060405180830381865afa158015611041573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611065919061221a565b90506110718233610a3a565b156110ce5760405162461bcd60e51b815260206004820152602760248201527f5573657220616c72656164792068617320616e206163746976652073756273636044820152663934b83a34b7b760c91b6064820152608401610669565b60808101516000838152600860205260409020541061113b5760405162461bcd60e51b8152602060048201526024808201527f6578636565646564206d6178207573657220737562736372697074696f6e206c6044820152631a5b5a5d60e21b6064820152608401610669565b8060a0015134101561115f5760405162461bcd60e51b8152600401610669906122a7565b61116b33600a54611805565b42600061117b8262278d006122d5565b905061118b848460a00151611653565b60008481526008602090815260408083208151608081018352888152600a805482860190815282850189815260608401898152855460018181018855968a52888a2095516004909102909501948555915184860155516002840155516003909201919091553385526009845291842080549182018155845291832090910186905580549161121883612195565b91905055506001600a5461122c91906122ed565b6040805184815260208101849052869133917f0b07e743ff4d8ff00f2ba2ad9ccacd63d0abc6730623fa67062c4f3b3a95494b910160405180910390a450505050565b61127a33838361181f565b5050565b6112883383611470565b6112a45760405162461bcd60e51b8152600401610669906121b0565b6112b0848484846118ee565b50505050565b60606112c1826113a3565b60006112d860408051602081019091526000815290565b905060008151116112f85760405180602001604052806000815250611323565b8061130284611921565b604051602001611313929190612304565b6040516020818303038152906040525b9392505050565b611332611759565b6001600160a01b0381166113975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610669565b6113a0816117b3565b50565b6000818152600260205260409020546001600160a01b03166113a05760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610669565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061143782610e3a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061147c83610e3a565b9050806001600160a01b0316846001600160a01b031614806114c357506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806114e75750836001600160a01b03166114dc846105cd565b6001600160a01b0316145b949350505050565b826001600160a01b031661150282610e3a565b6001600160a01b0316146115285760405162461bcd60e51b815260040161066990612333565b6001600160a01b03821661158a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610669565b826001600160a01b031661159d82610e3a565b6001600160a01b0316146115c35760405162461bcd60e51b815260040161066990612333565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b803410156116735760405162461bcd60e51b8152600401610669906122a7565b60075460405160248101849052604481018390526000916001600160a01b031690349060640160408051601f198184030181529181526020820180516001600160e01b031663446f62e760e11b179052516116ce9190612378565b60006040518083038185875af1925050503d806000811461170b576040519150601f19603f3d011682016040523d82523d6000602084013e611710565b606091505b505090508061070a5760405162461bcd60e51b81526020600482015260156024820152741d5c19185d19481c995d995b9d594819985a5b1959605a1b6044820152606401610669565b6006546001600160a01b03163314610f325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610669565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61127a8282604051806020016040528060008152506119be565b816001600160a01b0316836001600160a01b031614156118815760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610669565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6118f98484846114ef565b611905848484846119f1565b6112b05760405162461bcd60e51b815260040161066990612394565b6060600061192e83611aef565b600101905060008167ffffffffffffffff81111561194e5761194e611ff5565b6040519080825280601f01601f191660200182016040528015611978576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846119b1576119b6565b611982565b509392505050565b6119c88383611bc7565b6119d560008484846119f1565b61070a5760405162461bcd60e51b815260040161066990612394565b60006001600160a01b0384163b15611ae457604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611a359033908990889088906004016123e6565b6020604051808303816000875af1925050508015611a70575060408051601f3d908101601f19168201909252611a6d91810190612423565b60015b611aca573d808015611a9e576040519150601f19603f3d011682016040523d82523d6000602084013e611aa3565b606091505b508051611ac25760405162461bcd60e51b815260040161066990612394565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506114e7565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611b2e5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611b5a576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611b7857662386f26fc10000830492506010015b6305f5e1008310611b90576305f5e100830492506008015b6127108310611ba457612710830492506004015b60648310611bb6576064830492506002015b600a83106105355760010192915050565b6001600160a01b038216611c1d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610669565b6000818152600260205260409020546001600160a01b031615611c825760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610669565b6000818152600260205260409020546001600160a01b031615611ce75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610669565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054828255906000526020600020906004028101928215611db65760005260206000209160040282015b82811115611db6578254825560018084015490830155600280840154908301556003808401549083015560049283019290910190611d7d565b50611dc2929150611dc6565b5090565b5b80821115611dc257600080825560018201819055600282018190556003820155600401611dc7565b6001600160e01b0319811681146113a057600080fd5b600060208284031215611e1757600080fd5b813561132381611def565b60005b83811015611e3d578181015183820152602001611e25565b838111156112b05750506000910152565b60008151808452611e66816020860160208601611e22565b601f01601f19169290920160200192915050565b6020815260006113236020830184611e4e565b600060208284031215611e9f57600080fd5b5035919050565b6001600160a01b03811681146113a057600080fd5b60008060408385031215611ece57600080fd5b8235611ed981611ea6565b946020939093013593505050565b60008060408385031215611efa57600080fd5b823591506020830135611f0c81611ea6565b809150509250929050565b600080600060608486031215611f2c57600080fd5b8335611f3781611ea6565b92506020840135611f4781611ea6565b929592945050506040919091013590565b600060208284031215611f6a57600080fd5b813561132381611ea6565b6020808252825182820181905260009190848201906040850190845b81811015611fad57835183529284019291840191600101611f91565b50909695505050505050565b80151581146113a057600080fd5b60008060408385031215611fda57600080fd5b8235611fe581611ea6565b91506020830135611f0c81611fb9565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561203457612034611ff5565b604052919050565b6000806000806080858703121561205257600080fd5b843561205d81611ea6565b935060208581013561206e81611ea6565b935060408601359250606086013567ffffffffffffffff8082111561209257600080fd5b818801915088601f8301126120a657600080fd5b8135818111156120b8576120b8611ff5565b6120ca601f8201601f1916850161200b565b915080825289848285010111156120e057600080fd5b808484018584013760008482840101525080935050505092959194509250565b6000806040838503121561211357600080fd5b823561211e81611ea6565b91506020830135611f0c81611ea6565b600181811c9082168061214257607f821691505b6020821081141561216357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156121a9576121a961217f565b5060010190565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60006020828403121561220f57600080fd5b815161132381611fb9565b600060e0828403121561222c57600080fd5b60405160e0810181811067ffffffffffffffff8211171561224f5761224f611ff5565b60405282518152602083015161226481611ea6565b8060208301525060408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b602080825260149082015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b604082015260600190565b600082198211156122e8576122e861217f565b500190565b6000828210156122ff576122ff61217f565b500390565b60008351612316818460208801611e22565b83519083019061232a818360208801611e22565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6000825161238a818460208701611e22565b9190910192915050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061241990830184611e4e565b9695505050505050565b60006020828403121561243557600080fd5b815161132381611def56fea2646970667358221220499d72d7341abbd3b018829938f6fc1a8ca69ff60eabd18ad3e346f774195bca64736f6c634300080c0033",
  "devdoc": {
    "author": "Rocklabs",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "checkUserSubscription(uint256,address)": {
        "details": "check if user already subscribed in service"
      },
      "checkValidSubscription(uint256,address)": {
        "details": "check if user's subscription is still valid."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(uint256)": {
        "details": "user subscriptes a service",
        "params": {
          "serviceId": "service id"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renew(uint256,address)": {
        "details": "renew the service if the service has been expired",
        "params": {
          "serviceId": "service id",
          "user": "who wants to renew the service"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "hatcher service for user",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mint(uint256)": {
        "notice": "only supports native token as payment, erc20 is going to be supported asap"
      }
    },
    "notice": "this contact is for users who could pay for the service",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 216,
        "contract": "contracts/HatcherServicePassport.sol:HatcherServicePassport",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 218,
        "contract": "contracts/HatcherServicePassport.sol:HatcherServicePassport",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 222,
        "contract": "contracts/HatcherServicePassport.sol:HatcherServicePassport",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 226,
        "contract": "contracts/HatcherServicePassport.sol:HatcherServicePassport",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 230,
        "contract": "contracts/HatcherServicePassport.sol:HatcherServicePassport",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 236,
        "contract": "contracts/HatcherServicePassport.sol:HatcherServicePassport",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/HatcherServicePassport.sol:HatcherServicePassport",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3977,
        "contract": "contracts/HatcherServicePassport.sol:HatcherServicePassport",
        "label": "_certificateContract",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(HatcherServiceCertificate)3949"
      },
      {
        "astId": 3983,
        "contract": "contracts/HatcherServicePassport.sol:HatcherServicePassport",
        "label": "_serviceUsers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_array(t_struct(UserInfo)3974_storage)dyn_storage)"
      },
      {
        "astId": 3988,
        "contract": "contracts/HatcherServicePassport.sol:HatcherServicePassport",
        "label": "_userServices",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3990,
        "contract": "contracts/HatcherServicePassport.sol:HatcherServicePassport",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(UserInfo)3974_storage)dyn_storage": {
        "base": "t_struct(UserInfo)3974_storage",
        "encoding": "dynamic_array",
        "label": "struct HatcherServicePassport.UserInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(HatcherServiceCertificate)3949": {
        "encoding": "inplace",
        "label": "contract HatcherServiceCertificate",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(UserInfo)3974_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct HatcherServicePassport.UserInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserInfo)3974_storage)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(UserInfo)3974_storage": {
        "encoding": "inplace",
        "label": "struct HatcherServicePassport.UserInfo",
        "members": [
          {
            "astId": 3967,
            "contract": "contracts/HatcherServicePassport.sol:HatcherServicePassport",
            "label": "serviceId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3969,
            "contract": "contracts/HatcherServicePassport.sol:HatcherServicePassport",
            "label": "passportId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3971,
            "contract": "contracts/HatcherServicePassport.sol:HatcherServicePassport",
            "label": "createdTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3973,
            "contract": "contracts/HatcherServicePassport.sol:HatcherServicePassport",
            "label": "expiredTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}